import os
import telebot
from telebot import types
from datetime import datetime

ADMIN_ID = 426269597  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id

import os
bot = telebot.TeleBot(os.environ['7834545929:AAFGIMWSTf2RtXIBnz3BTMElpBzzxOpMD4c'])

CATEGORIES = ['üçî –ï–¥–∞', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 'üè† –ñ–∏–ª—å—ë', 'üì¶ –î—Ä—É–≥–æ–µ']

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = os.path.join(os.path.expanduser('~'), 'Desktop', '–ë–æ—Ç', 'bot_data')
os.makedirs(DATA_DIR, exist_ok=True)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_balance_file(user_id):
    return os.path.join(DATA_DIR, f"balance_{user_id}.txt")

def get_history_file(user_id):
    return os.path.join(DATA_DIR, f"history_{user_id}.txt")

def read_balance(user_id):
    filename = get_balance_file(user_id)
    if not os.path.exists(filename):
        return 0.0
    with open(filename, 'r', encoding='utf-8') as f:
        try:
            return float(f.read())
        except:
            return 0.0

def write_balance(user_id, balance):
    filename = get_balance_file(user_id)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(str(balance))

def add_history(user_id, op_type, amount, category='-', comment=''):
    filename = get_history_file(user_id)
    with open(filename, 'a', encoding='utf-8') as f:
        now = datetime.now().strftime('%Y-%m-%d %H:%M')
        f.write(f"{now};{op_type};{amount};{category};{comment}\n")

# --- –ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã ---
def quick_amount_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(100, 5100, 400):
        row = [str(j) for j in range(i, i+400, 100) if j <= 5000]
        markup.add(*row)
    markup.add("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
    return markup

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥', '‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
    markup.add('üí∞ –ë–∞–ª–∞–Ω—Å', 'üìã –ò—Å—Ç–æ—Ä–∏—è')
    markup.add('üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥')
    markup.add('‚ÑπÔ∏è –ü–æ–º–æ—â—å', '‚öôÔ∏è –ê–¥–º–∏–Ω-—Ö–µ–ª–ø')
    return markup

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ ---
HELP_TEXT = (
    "<b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
    "‚Ä¢ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ —Å –±—ã—Å—Ç—Ä—ã–º –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.\n"
    "‚Ä¢ <b>‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å—É–º–º—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.\n"
    "‚Ä¢ <b>üí∞ –ë–∞–ª–∞–Ω—Å</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.\n"
    "‚Ä¢ <b>üìã –ò—Å—Ç–æ—Ä–∏—è</b> ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π.\n"
    "‚Ä¢ <b>üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è</b> ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
    "‚Ä¢ <b>üóì –ó–∞ –º–µ—Å—è—Ü</b> ‚Äî –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –º–µ—Å—è—Ü.\n"
    "‚Ä¢ <b>üìä –ì–æ–¥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º.\n"
    "‚Ä¢ <b>üìÖ –°—Ä–∞–≤–Ω–∏—Ç—å –º–µ—Å—è—Ü—ã</b> ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤.\n"
    "‚Ä¢ <b>üóì –°—Ä–∞–≤–Ω–∏—Ç—å –≥–æ–¥–∞</b> ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≥–æ–¥–∞–º.\n\n"
    "<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b> –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ ‚öôÔ∏è –ê–¥–º–∏–Ω-—Ö–µ–ª–ø."
)

@bot.message_handler(func=lambda m: m.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def help_button(message):
    bot.send_message(message.chat.id, HELP_TEXT, parse_mode='HTML')

# --- –ê–¥–º–∏–Ω-—Ö–µ–ª–ø ---
ADMIN_HELP_TEXT = (
    "<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
    "üî¥ <b>–°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n"
    "<code>/reset_all_data</code>\n"
    "–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
    "üü† <b>–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
    "<code>/reset_user &lt;user_id&gt;</code>\n"
    "–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id.\n"
    "–ü—Ä–∏–º–µ—Ä: <code>/reset_user 123456789</code>\n\n"
    "user_id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot."
)

@bot.message_handler(commands=['adminhelp'])
def adminhelp_command(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º.", parse_mode='HTML')
        return
    bot.send_message(message.chat.id, ADMIN_HELP_TEXT, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == '‚öôÔ∏è –ê–¥–º–∏–Ω-—Ö–µ–ª–ø')
def adminhelp_button(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º.", parse_mode='HTML')
        return
    bot.send_message(message.chat.id, ADMIN_HELP_TEXT, parse_mode='HTML')

@bot.message_handler(commands=['reset_all_data'])
def reset_all_data(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    count = 0
    for filename in os.listdir(DATA_DIR):
        if (filename.startswith('balance_') or filename.startswith('history_')) and filename.endswith('.txt'):
            os.remove(os.path.join(DATA_DIR, filename))
            count += 1
    bot.send_message(message.chat.id, f"‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã! ({count} —Ñ–∞–π–ª–æ–≤)")

@bot.message_handler(commands=['reset_user'])
def reset_user(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reset_user <user_id>")
            return
        user_id = int(parts[1])
        files = [os.path.join(DATA_DIR, f"balance_{user_id}.txt"), os.path.join(DATA_DIR, f"history_{user_id}.txt")]
        deleted = 0
        for filename in files:
            if os.path.exists(filename):
                os.remove(filename)
                deleted += 1
        if deleted:
            bot.send_message(message.chat.id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã!")
        else:
            bot.send_message(message.chat.id, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['start', 'menu'])
def start(message):
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    )
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=main_menu(),
        parse_mode='HTML'
    )

# --- –î–û–•–û–î ---
@bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')
def income_command(message):
    msg = bot.send_message(
        message.chat.id,
        '<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:</b>',
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_income_amount)

def process_income_amount(message):
    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
        msg = bot.send_message(message.chat.id, '<b>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ö–æ–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":</b>', reply_markup=markup, parse_mode='HTML')
        bot.register_next_step_handler(msg, process_income_comment, amount)
    except ValueError:
        msg = bot.send_message(message.chat.id, '‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>', reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
        bot.register_next_step_handler(msg, process_income_amount)

def process_income_comment(message, amount):
    user_id = message.from_user.id
    comment = "" if message.text == "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" else message.text
    balance = read_balance(user_id) + amount
    write_balance(user_id, balance)
    add_history(user_id, '–î–æ—Ö–æ–¥', amount, '-', comment)
    bot.send_message(
        message.chat.id,
        f"‚úÖ <b>–î–æ—Ö–æ–¥ {amount:.2f}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\nüí¨ <i>{comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</i>\n\nüí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}‚ÇΩ</code>",
        reply_markup=main_menu(),
        parse_mode='HTML'
    )

# --- –†–ê–°–•–û–î ---
@bot.message_handler(func=lambda m: m.text == '‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥')
def expense_command(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for cat in CATEGORIES:
        markup.add(cat)
    msg = bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:</b>', reply_markup=markup, parse_mode='HTML')
    bot.register_next_step_handler(msg, process_expense_category)

def process_expense_category(message):
    user_id = message.from_user.id
    category = message.text
    if category not in CATEGORIES:
        bot.send_message(message.chat.id, '‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.</b>', reply_markup=main_menu(), parse_mode='HTML')
        return
    msg = bot.send_message(
        message.chat.id,
        f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:</b>',
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode='HTML'
    )
    bot.register_next_step_handler(msg, process_expense_amount, category)

def process_expense_amount(message, category):
    user_id = message.from_user.id
    try:
        amount = float(message.text.replace(',', '.'))
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add('–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
        msg = bot.send_message(message.chat.id, '<b>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–∞—Å—Ö–æ–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":</b>', reply_markup=markup, parse_mode='HTML')
        bot.register_next_step_handler(msg, process_expense_comment, amount, category)
    except ValueError:
        msg = bot.send_message(message.chat.id, '‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>', reply_markup=types.ReplyKeyboardRemove(), parse_mode='HTML')
        bot.register_next_step_handler(msg, process_expense_amount, category)

def process_expense_comment(message, amount, category):
    user_id = message.from_user.id
    comment = "" if message.text == "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" else message.text
    balance = read_balance(user_id) - amount
    write_balance(user_id, balance)
    add_history(user_id, '–†–∞—Å—Ö–æ–¥', amount, category, comment)
    bot.send_message(
        message.chat.id,
        f"‚úÖ <b>–†–∞—Å—Ö–æ–¥ {amount:.2f}‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–æ–±–∞–≤–ª–µ–Ω!</b>\nüí¨ <i>{comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</i>\n\nüí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}‚ÇΩ</code>",
        reply_markup=main_menu(),
        parse_mode='HTML'
    )

# --- –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–∞–ª–∞–Ω—Å, –∏—Å—Ç–æ—Ä–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç.–¥.) ---
# (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)

@bot.message_handler(func=lambda m: m.text == 'üí∞ –ë–∞–ª–∞–Ω—Å')
def stats_command(message):
    user_id = message.from_user.id
    balance = read_balance(user_id)
    bot.send_message(
        message.chat.id,
        f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}‚ÇΩ</code>",
        reply_markup=main_menu(),
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda m: m.text == 'üìã –ò—Å—Ç–æ—Ä–∏—è')
def history_command(message):
    user_id = message.from_user.id
    filename = get_history_file(user_id)
    if not os.path.exists(filename):
        bot.send_message(message.chat.id, "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</b>", reply_markup=main_menu(), parse_mode='HTML')
        return
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.readlines()[-10:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π
    if not lines:
        bot.send_message(message.chat.id, "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</b>", reply_markup=main_menu(), parse_mode='HTML')
        return
    text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
    for line in lines:
        try:
            date, op_type, amount, category, comment = line.strip().split(';')
            op_emoji = '‚ûï' if op_type == '–î–æ—Ö–æ–¥' else '‚ûñ'
            cat = category if category != '-' else ''
            comm = f"\nüí¨ <i>{comment}</i>" if comment else ''
            text += f"{op_emoji} <b>{op_type}</b> | <i>{cat}</i> | <code>{float(amount):.2f}‚ÇΩ</code>{comm}\nüïí {date}\n\n"
        except Exception:
            continue
    bot.send_message(message.chat.id, text, reply_markup=main_menu(), parse_mode='HTML')

# --- –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥ ---
@bot.message_handler(func=lambda m: m.text == 'üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥')
def period_history_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add('–°–µ–≥–æ–¥–Ω—è', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü')
    markup.add('–°—Ä–∞–≤–Ω–∏—Ç—å –º–µ—Å—è—Ü—ã')
    markup.add('‚¨ÖÔ∏è –í –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>', reply_markup=markup, parse_mode='HTML')
    bot.register_next_step_handler(msg, process_period_choice)

def process_period_choice(message):
    user_id = message.from_user.id
    period = message.text
    if period == '‚¨ÖÔ∏è –í –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu())
        return
    if period == '–°—Ä–∞–≤–Ω–∏—Ç—å –º–µ—Å—è—Ü—ã':
        compare_months_command(message)
        return
    filename = get_history_file(user_id)
    if not os.path.exists(filename):
        bot.send_message(message.chat.id, 'üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</b>', reply_markup=main_menu(), parse_mode='HTML')
        return
    now = datetime.now()
    lines = []
    with open(filename, 'r', encoding='utf-8') as f:
        for line in f:
            try:
                date_str, op_type, amount, category, comment = line.strip().split(';')
                date = datetime.strptime(date_str, '%Y-%m-%d %H:%M')
                if period == '–°–µ–≥–æ–¥–Ω—è' and date.date() == now.date():
                    lines.append(line)
                elif period == '–ù–µ–¥–µ–ª—è' and (now.date() - date.date()).days < 7:
                    lines.append(line)
                elif period == '–ú–µ—Å—è—Ü' and date.year == now.year and date.month == now.month:
                    lines.append(line)
            except Exception:
                continue
    if not lines:
        bot.send_message(message.chat.id, f'üìã <b>–í –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ.</b>', reply_markup=main_menu(), parse_mode='HTML')
        return
    period_text = {'–°–µ–≥–æ–¥–Ω—è': '–∑–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–µ–¥–µ–ª—è': '–∑–∞ –Ω–µ–¥–µ–ª—é', '–ú–µ—Å—è—Ü': '–∑–∞ –º–µ—Å—è—Ü'}
    text = f"üìÖ <b>–û–ø–µ—Ä–∞—Ü–∏–∏ {period_text.get(period, '')}:</b>\n\n"
    for line in lines:
        try:
            date, op_type, amount, category, comment = line.strip().split(';')
            op_emoji = '‚ûï' if op_type == '–î–æ—Ö–æ–¥' else '‚ûñ'
            cat = category if category != '-' else ''
            comm = f"\nüí¨ <i>{comment}</i>" if comment else ''
            time_str = date if period != '–°–µ–≥–æ–¥–Ω—è' else date[11:]
            text += f"{op_emoji} <b>{op_type}</b> | <i>{cat}</i> | <code>{float(amount):.2f}‚ÇΩ</code>{comm}\nüïí {time_str}\n\n"
        except Exception:
            continue
    bot.send_message(message.chat.id, text, reply_markup=main_menu(), parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == 'üìÖ –°—Ä–∞–≤–Ω–∏—Ç—å –º–µ—Å—è—Ü—ã')
def compare_months_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    months = [datetime.now().strftime('%Y-%m')]
    for i in range(1, 12):
        months.append(datetime(datetime.now().year, datetime.now().month - i, 1).strftime('%Y-%m'))
    markup.add(*months)
    markup.add('‚¨ÖÔ∏è –í –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</b>', reply_markup=markup, parse_mode='HTML')
    bot.register_next_step_handler(msg, process_compare_months)

def process_compare_months(message):
    user_id = message.from_user.id
    if message.text == '‚¨ÖÔ∏è –í –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu())
        return

    try:
        selected_month = datetime.strptime(message.text, '%Y-%m')
        current_month = datetime.now().strftime('%Y-%m')
        current_month_obj = datetime.strptime(current_month, '%Y-%m')

        if selected_month > current_month_obj:
            bot.send_message(message.chat.id, "‚ö†Ô∏è <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.</b>", reply_markup=main_menu(), parse_mode='HTML')
            return

        filename = get_history_file(user_id)
        if not os.path.exists(filename):
            bot.send_message(message.chat.id, "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</b>", reply_markup=main_menu(), parse_mode='HTML')
            return

        current_month_lines = []
        selected_month_lines = []

        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    date_str, op_type, amount, category, comment = line.strip().split(';')
                    date = datetime.strptime(date_str, '%Y-%m-%d %H:%M')
                    if date.year == selected_month.year and date.month == selected_month.month:
                        selected_month_lines.append(line)
                    elif date.year == current_month_obj.year and date.month == current_month_obj.month:
                        current_month_lines.append(line)
                except Exception:
                    continue

        if not current_month_lines and not selected_month_lines:
            bot.send_message(message.chat.id, "üìã <b>–í –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ.</b>", reply_markup=main_menu(), parse_mode='HTML')
            return

        text = f"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞ {selected_month.strftime('%Y-%m')} –∏ {current_month_obj.strftime('%Y-%m')}:</b>\n\n"
        if current_month_lines:
            text += "<b>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b>\n"
            for line in current_month_lines:
                try:
                    date, op_type, amount, category, comment = line.strip().split(';')
                    op_emoji = '‚ûï' if op_type == '–î–æ—Ö–æ–¥' else '‚ûñ'
                    cat = category if category != '-' else ''
                    comm = f"\nüí¨ <i>{comment}</i>" if comment else ''
                    text += f"{op_emoji} <b>{op_type}</b> | <i>{cat}</i> | <code>{float(amount):.2f}‚ÇΩ</code>{comm}\nüïí {date[11:]}\n\n"
                except Exception:
                    continue
            text += "\n"

        if selected_month_lines:
            text += f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü ({selected_month.strftime('%Y-%m')}):</b>\n"
            for line in selected_month_lines:
                try:
                    date, op_type, amount, category, comment = line.strip().split(';')
                    op_emoji = '‚ûï' if op_type == '–î–æ—Ö–æ–¥' else '‚ûñ'
                    cat = category if category != '-' else ''
                    comm = f"\nüí¨ <i>{comment}</i>" if comment else ''
                    text += f"{op_emoji} <b>{op_type}</b> | <i>{cat}</i> | <code>{float(amount):.2f}‚ÇΩ</code>{comm}\nüïí {date[11:]}\n\n"
                except Exception:
                    continue

        bot.send_message(message.chat.id, text, reply_markup=main_menu(), parse_mode='HTML')

    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.</b>", reply_markup=main_menu(), parse_mode='HTML')

@bot.message_handler(func=lambda m: m.text == 'üóì –°—Ä–∞–≤–Ω–∏—Ç—å –≥–æ–¥–∞')
def compare_years_command(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    years = [datetime.now().year]
    for i in range(1, 5): # –°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 5 –≥–æ–¥–∞–º–∏
        years.append(datetime.now().year - i)
    markup.add(*years)
    markup.add('‚¨ÖÔ∏è –í –º–µ–Ω—é')
    msg = bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</b>', reply_markup=markup, parse_mode='HTML')
    bot.register_next_step_handler(msg, process_compare_years)

def process_compare_years(message):
    user_id = message.from_user.id
    if message.text == '‚¨ÖÔ∏è –í –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu())
        return

    try:
        selected_year = int(message.text)
        current_year = datetime.now().year

        if selected_year > current_year:
            bot.send_message(message.chat.id, "‚ö†Ô∏è <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.</b>", reply_markup=main_menu(), parse_mode='HTML')
            return

        filename = get_history_file(user_id)
        if not os.path.exists(filename):
            bot.send_message(message.chat.id, "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.</b>", reply_markup=main_menu(), parse_mode='HTML')
            return

        current_year_lines = []
        selected_year_lines = []

        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    date_str, op_type, amount, category, comment = line.strip().split(';')
                    date = datetime.strptime(date_str, '%Y-%m-%d %H:%M')
                    if date.year == selected_year:
                        selected_year_lines.append(line)
                    elif date.year == current_year:
                        current_year_lines.append(line)
                except Exception:
                    continue

        if not current_year_lines and not selected_year_lines:
            bot.send_message(message.chat.id, "üìã <b>–í –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ–¥—ã –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–æ.</b>", reply_markup=main_menu(), parse_mode='HTML')
            return

        text = f"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞ {selected_year} –∏ {current_year}:</b>\n\n"
        if current_year_lines:
            text += "<b>–¢–µ–∫—É—â–∏–π –≥–æ–¥:</b>\n"
            for line in current_year_lines:
                try:
                    date, op_type, amount, category, comment = line.strip().split(';')
                    op_emoji = '‚ûï' if op_type == '–î–æ—Ö–æ–¥' else '‚ûñ'
                    cat = category if category != '-' else ''
                    comm = f"\nüí¨ <i>{comment}</i>" if comment else ''
                    text += f"{op_emoji} <b>{op_type}</b> | <i>{cat}</i> | <code>{float(amount):.2f}‚ÇΩ</code>{comm}\nüïí {date[11:]}\n\n"
                except Exception:
                    continue
            text += "\n"

        if selected_year_lines:
            text += f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ ({selected_year}):</b>\n"
            for line in selected_year_lines:
                try:
                    date, op_type, amount, category, comment = line.strip().split(';')
                    op_emoji = '‚ûï' if op_type == '–î–æ—Ö–æ–¥' else '‚ûñ'
                    cat = category if category != '-' else ''
                    comm = f"\nüí¨ <i>{comment}</i>" if comment else ''
                    text += f"{op_emoji} <b>{op_type}</b> | <i>{cat}</i> | <code>{float(amount):.2f}‚ÇΩ</code>{comm}\nüïí {date[11:]}\n\n"
                except Exception:
                    continue

        bot.send_message(message.chat.id, text, reply_markup=main_menu(), parse_mode='HTML')

    except ValueError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.</b>", reply_markup=main_menu(), parse_mode='HTML')

@bot.message_handler(func=lambda m: True)
def fallback(message):
    bot.send_message(message.chat.id, "‚ÑπÔ∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:</b>", reply_markup=main_menu(), parse_mode='HTML')

bot.infinity_polling()